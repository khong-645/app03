import streamlit as st

try:
    from ultralytics import YOLO
    st.write("‚úÖ ‡πÇ‡∏´‡∏•‡∏î ultralytics ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except ModuleNotFoundError:
    st.error("‚ùå ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ ultralytics ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")

from PIL import Image
import requests
from io import BytesIO

model = None
try:
    model = YOLO("yolov8n.pt")
except Exception as e:
    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO: {e}")

def load_image_from_url(url):
    try:
        response = requests.get(url)
        img = Image.open(BytesIO(response.content)).convert("RGBA")
        return img
    except:
        return None

def detect_objects(image):
    if model is None:
        return []
    results = model.predict(image)
    if results and len(results) > 0:
        names = results[0].names
        classes = results[0].boxes.cls.tolist()
        detected = [names[int(c)] for c in classes]
        return list(set(detected))
    return []

def resize_images_to_base(base_image, overlay_images):
    base_size = base_image.size
    resized = []
    for img in overlay_images:
        resized.append(img.resize(base_size))
    return resized

def overlay_images(base_image, overlay_images, alpha=0.5):
    result = base_image.copy()
    for img in overlay_images:
        result = Image.blend(result, img, alpha)
    return result

st.title("üß† ‡∏ã‡πâ‡∏≠‡∏ô‡∏†‡∏≤‡∏û + ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ‡∏à‡∏≤‡∏Å URL")

url1 = st.text_input("URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (Base)", "")
url2 = st.text_input("URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1", "")
url3 = st.text_input("URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", "")
alpha = st.slider("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô (alpha)", 0.0, 1.0, 0.5, 0.05)

if st.button("‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ã‡πâ‡∏≠‡∏ô‡∏†‡∏≤‡∏û"):
    urls = [url1, url2, url3]
    all_images = []
    object_info = []

    for i, url in enumerate(urls):
        if url.strip():
            img = load_image_from_url(url)
            if img:
                all_images.append(img)
                with st.spinner(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà {i+1}..."):
                    objects = detect_objects(img)
                object_info.append((f"‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà {i+1}", url, objects))
            else:
                st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {url}")

    for idx, (title, url, objects) in enumerate(object_info):
        st.markdown(f"### {title}")
        st.image(all_images[idx], caption=f"‡∏à‡∏≤‡∏Å: {url}", use_container_width=True)
        if objects:
            st.success(f"‚úÖ ‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏: {', '.join(objects)}")
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å")

    if len(all_images) > 1:
        base = all_images[0]
        overlays = resize_images_to_base(base, all_images[1:])
        result = overlay_images(base, overlays, alpha)
        st.markdown("## üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        st.image(result, caption="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô", use_container_width=True)
    elif len(all_images) == 1:
        st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ")
    else:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ")
